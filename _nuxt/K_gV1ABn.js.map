{"version":3,"mappings":";4uBAWaA,GAAc,CACzB,CACE,MAAO,WACP,MAAO,UACT,EACA,CACE,MAAO,MACP,MAAO,KACT,EACA,CACE,MAAO,OACP,MAAO,OAEX,EAEaC,EAAuB,WACvBC,EAAwB,UAE/BC,EAAkC,CACtC,SAAUC,GACV,IAAKC,EACP,EAEgB,SAAAC,GAAeC,EAAQN,EAAsB,CAC3D,OAAOE,EAAQI,CAAK,GAAKJ,EAAQF,CAAoB,CACvD,CAEO,SAASO,EAAkB,CAChC,KAAAC,EAAO,GACP,MAAAC,EAAQ,IACR,OAAAC,EAAS,IACT,UAAAC,EAAYV,EACZ,QAAAW,EAAU,UACV,OAAAC,EAAS,GACT,MAAAC,EAAQ,MACV,EAAG,CACM,OACL,MAAAL,EACA,OAAAC,EACA,KAAM,MACN,MAAAI,EACA,OAAAD,EACA,aAAc,CACZ,mBAAoB,GACpB,UAAW,GACX,OAAQ,EACV,EACA,YAAa,CACX,MAAOF,EACP,KAAM,SACR,EACA,kBAAmB,CACjB,MAAOC,CACT,EACA,qBAAsB,CACpB,MAAOD,EACP,KAAM,eACR,EACA,kBAAmB,CACjB,MAAOA,EACP,KAAM,KACR,EACA,KAAAH,CACF,CACF,CAEA,MAAMO,GAGA,CACJ,CAAE,MAAO,MAAO,MAAO,KAAM,EAC7B,CAAE,MAAO,MAAO,MAAO,KAAM,CAC/B,EAEA,eAAsBC,GACpBC,EACAC,EAAoC,GACpC,CACM,MAAAC,EAAc,GAAGD,EAAQ,aAAe,UAAU,IAAQ,WAAO,SAAS,OAC5E,IACF,KAAM,CAAE,QAASE,CAAkB,QAAMC,EAAA,wBAAAD,CAAA,eAAO,eAA2B,4EACrEE,EAAgB,MAAM,QAAQ,IAAIL,EAAM,IAAKM,GAAS,CACpD,MAAAC,EAAS,IAAIJ,EAAcb,EAAiB,CAAE,KAAMgB,EAAK,GAAI,CAAC,CAAC,EACrE,OAAO,QAAQ,IAAIR,GAA+B,IAAI,MAAOU,GAAS,CACpE,MAAMC,EAAYD,EAAK,MACjBjB,EAAO,MAAMgB,EAAO,WAAWE,CAAS,EAC9C,GAAI,CAAClB,EACH,MAAM,IAAI,MAAM,kCAAkCe,EAAK,QAAQ,IAAIG,CAAS,EAAE,EAEzE,OACL,SAAU,GAAGH,EAAK,QAAQ,IAAIG,CAAS,GACvC,KAAAlB,CACF,EACD,CAAC,EACH,CAAC,EAEI,CAAE,QAASmB,CAAU,QAAMN,EAAA,wBAAAM,CAAA,eAAO,eAAO,8BAAAA,CAAA,+CACzCC,EAAM,IAAID,EAChB,GAAI,CAACC,EACG,UAAI,MAAM,wCAAwC,EAE1DN,EAAc,KAAK,EAAE,QAASE,GAAW,CACvCI,EAAI,KAAKJ,EAAO,SAAUA,EAAO,IAAI,EACtC,EAED,KAAM,CAAE,OAAAK,CAAW,QAAMR,EAAA,uBAAAQ,GAAA,aAAO,eAAY,OAAAC,KAAA,iBAAAD,CAAA,6CACtCE,EAAc,MAAMH,EAAI,cAAc,CAC1C,KAAM,OACN,YAAa,UACb,mBAAoB,CAClB,MAAO,EACT,CACD,EACDC,EAAOE,EAAaZ,CAAW,QACxBa,EAAO,CAEd,QAAQ,MAAMA,CAAK,EACLC,EAAS,EACjB,IAAI,CACR,KAAM,iCACN,MAAO,oCAAoCd,CAAW,GACtD,QAAS,EACT,MAAO,MACP,GAAI,CACF,MAAO,iCACT,CACD,EAEL","names":["iconOptions","DEFAULT_QR_CODE_ICON","DEFAULT_QR_CODE_COLOR","iconMap","LikeCoinIcon","NFCIcon","getQRCodeIcon","value","getQRCodeOptions","data","width","height","fillColor","bgColor","margin","image","QRCODE_DOWNLOADABLE_FILE_TYPES","downloadQRCodes","items","options","zipFilename","QRCodeStyling","__vitePreload","qrCodeResults","item","qrCode","type","extension","JSZip","zip","saveAs","n","zipFileBlob","error","useToast"],"ignoreList":[],"sources":["../../../../utils/qrcode.ts"],"sourcesContent":["import type {\n  DrawType,\n  DotType,\n  CornerSquareType,\n  CornerDotType,\n  FileExtension\n} from '@likecoin/qr-code-styling'\n\nimport NFCIcon from '~/assets/images/nfc.png'\nimport LikeCoinIcon from '~/assets/images/logo.png'\n\nexport const iconOptions = [\n  {\n    value: 'likecoin',\n    label: 'LikeCoin'\n  },\n  {\n    value: 'nfc',\n    label: 'NFC'\n  },\n  {\n    value: 'none',\n    label: 'None'\n  }\n]\n\nexport const DEFAULT_QR_CODE_ICON = 'likecoin'\nexport const DEFAULT_QR_CODE_COLOR = '#28646e'\n\nconst iconMap: Record<string, string> = {\n  likecoin: LikeCoinIcon,\n  nfc: NFCIcon\n}\n\nexport function getQRCodeIcon (value = DEFAULT_QR_CODE_ICON) {\n  return iconMap[value] || iconMap[DEFAULT_QR_CODE_ICON]\n}\n\nexport function getQRCodeOptions ({\n  data = '',\n  width = 300,\n  height = 300,\n  fillColor = DEFAULT_QR_CODE_COLOR,\n  bgColor = '#ffffff',\n  margin = 10,\n  image = undefined as string | undefined\n}) {\n  return {\n    width,\n    height,\n    type: 'svg' as DrawType,\n    image,\n    margin,\n    imageOptions: {\n      hideBackgroundDots: true,\n      imageSize: 0.3,\n      margin: 10\n    },\n    dotsOptions: {\n      color: fillColor,\n      type: 'rounded' as DotType\n    },\n    backgroundOptions: {\n      color: bgColor\n    },\n    cornersSquareOptions: {\n      color: fillColor,\n      type: 'extra-rounded' as CornerSquareType\n    },\n    cornersDotOptions: {\n      color: fillColor,\n      type: 'dot' as CornerDotType\n    },\n    data\n  }\n}\n\nconst QRCODE_DOWNLOADABLE_FILE_TYPES: {\n  value: FileExtension\n  label: string\n}[] = [\n  { value: 'svg', label: 'SVG' },\n  { value: 'png', label: 'PNG' }\n]\n\nexport async function downloadQRCodes (\n  items: { filename: string, url: string }[],\n  options: { zipFilename?: string } = {}\n) {\n  const zipFilename = `${options.zipFilename || 'QR Codes'}-${new Date().getTime()}.zip`\n  try {\n    const { default: QRCodeStyling } = await import('@likecoin/qr-code-styling')\n    const qrCodeResults = await Promise.all(items.map((item) => {\n      const qrCode = new QRCodeStyling(getQRCodeOptions({ data: item.url }))\n      return Promise.all(QRCODE_DOWNLOADABLE_FILE_TYPES.map(async (type) => {\n        const extension = type.value\n        const data = await qrCode.getRawData(extension)\n        if (!data) {\n          throw new Error(`Failed to generate QR code for ${item.filename}.${extension}`)\n        }\n        return {\n          filename: `${item.filename}.${extension}`,\n          data\n        }\n      }))\n    }))\n\n    const { default: JSZip } = await import('jszip')\n    const zip = new JSZip()\n    if (!zip) {\n      throw new Error('Failed to create zip file for QR codes')\n    }\n    qrCodeResults.flat().forEach((qrCode) => {\n      zip.file(qrCode.filename, qrCode.data)\n    })\n\n    const { saveAs } = await import('file-saver')\n    const zipFileBlob = await zip.generateAsync({\n      type: 'blob',\n      compression: 'DEFLATE',\n      compressionOptions: {\n        level: 9\n      }\n    })\n    saveAs(zipFileBlob, zipFilename)\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(error)\n    const toast = useToast()\n    toast.add({\n      icon: 'i-heroicons-exclamation-circle',\n      title: `Failed to download QR codes file ${zipFilename}`,\n      timeout: 0,\n      color: 'red',\n      ui: {\n        title: 'text-red-400 dark:text-red-400'\n      }\n    })\n  }\n}\n"],"file":"_nuxt/K_gV1ABn.js"}