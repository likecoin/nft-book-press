{"version":3,"file":"RlU746B2.js","sources":["../../../../stores/nft.ts"],"sourcesContent":["import { defineStore } from 'pinia'\n\nexport const useNftStore = defineStore('nft', () => {\n  const { LCD_URL, LIKE_CO_API } = useRuntimeConfig().public\n  const classMetadataByIdMap = ref({} as Record<string, any>)\n  const classListingInfoByIdMap = ref({} as Record<string, any>)\n\n  const getClassMetadataById = computed(() => (classId: string) => classMetadataByIdMap.value[classId])\n\n  const getClassListingInfoById = computed(() => (classId: string) => classListingInfoByIdMap.value[classId])\n\n  async function fetchClassMetadataById (classId: string) {\n    let classData: any\n    if (classId.startsWith('0x')) {\n      const { getClassMetadata } = useNFTContractReader()\n      classData = await getClassMetadata(classId)\n    } else {\n      const data = await $fetch(`${LCD_URL}/cosmos/nft/v1beta1/classes/${classId}`);\n      ({ class: classData } = data as any)\n    }\n    classMetadataByIdMap.value[classId] = classData\n    return classData\n  }\n\n  function lazyFetchClassMetadataById (classId: string) {\n    if (getClassMetadataById.value(classId)) { return getClassMetadataById.value(classId) }\n    return fetchClassMetadataById(classId)\n  }\n\n  async function fetchClassListingInfoById (classId: string) {\n    const data = await $fetch(`${LIKE_CO_API}/likernft/book/store/${classId}`)\n    const listingInfo = data as any\n    classListingInfoByIdMap.value[classId] = listingInfo\n    return listingInfo\n  }\n\n  function lazyFetchClassListingInfoById (classId: string) {\n    if (classListingInfoByIdMap.value[classId]) { return classListingInfoByIdMap.value[classId] }\n    return fetchClassListingInfoById(classId)\n  }\n\n  return {\n    classMetadataByIdMap,\n    classStoreDataByIdMap: classListingInfoByIdMap,\n    getClassMetadataById,\n    getClassListingInfoById,\n    fetchClassMetadataById,\n    lazyFetchClassMetadataById,\n    fetchClassListingInfoById,\n    lazyFetchClassListingInfoById\n  }\n})\n"],"names":["useNftStore","defineStore","LCD_URL","LIKE_CO_API","useRuntimeConfig","classMetadataByIdMap","ref","classListingInfoByIdMap","getClassMetadataById","computed","classId","getClassListingInfoById","fetchClassMetadataById","classData","getClassMetadata","useNFTContractReader","lazyFetchClassMetadataById","fetchClassListingInfoById","listingInfo","lazyFetchClassListingInfoById"],"mappings":"iZAEa,MAAAA,EAAcC,EAAY,MAAO,IAAM,CAClD,KAAM,CAAE,QAAAC,EAAS,YAAAC,GAAgBC,EAAmB,EAAA,OAC9CC,EAAuBC,EAAI,EAAyB,EACpDC,EAA0BD,EAAI,EAAyB,EAEvDE,EAAuBC,EAAS,IAAOC,GAAoBL,EAAqB,MAAMK,CAAO,CAAC,EAE9FC,EAA0BF,EAAS,IAAOC,GAAoBH,EAAwB,MAAMG,CAAO,CAAC,EAE1G,eAAeE,EAAwBF,EAAiB,CAClD,IAAAG,EACA,GAAAH,EAAQ,WAAW,IAAI,EAAG,CACtB,KAAA,CAAE,iBAAAI,CAAiB,EAAIC,EAAqB,EACtCF,EAAA,MAAMC,EAAiBJ,CAAO,CAAA,MAGzC,CAAE,MAAOG,CAAA,EADG,MAAM,OAAO,GAAGX,CAAO,+BAA+BQ,CAAO,EAAE,GAGzD,OAAAL,EAAA,MAAMK,CAAO,EAAIG,EAC/BA,CAAA,CAGT,SAASG,EAA4BN,EAAiB,CAChD,OAAAF,EAAqB,MAAME,CAAO,EAAYF,EAAqB,MAAME,CAAO,EAC7EE,EAAuBF,CAAO,CAAA,CAGvC,eAAeO,EAA2BP,EAAiB,CAEzD,MAAMQ,EADO,MAAM,OAAO,GAAGf,CAAW,wBAAwBO,CAAO,EAAE,EAEjD,OAAAH,EAAA,MAAMG,CAAO,EAAIQ,EAClCA,CAAA,CAGT,SAASC,EAA+BT,EAAiB,CACnD,OAAAH,EAAwB,MAAMG,CAAO,EAAYH,EAAwB,MAAMG,CAAO,EACnFO,EAA0BP,CAAO,CAAA,CAGnC,MAAA,CACL,qBAAAL,EACA,sBAAuBE,EACvB,qBAAAC,EACA,wBAAAG,EACA,uBAAAC,EACA,2BAAAI,EACA,0BAAAC,EACA,8BAAAE,CACF,CACF,CAAC"}