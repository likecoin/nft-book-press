{"version":3,"file":"BAjmJgfM.js","sources":["../../../../node_modules/@codemirror/legacy-modes/mode/python.js"],"sourcesContent":["function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\n\nvar wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\"]);\nvar commonKeywords = [\"as\", \"assert\", \"break\", \"class\", \"continue\",\n                      \"def\", \"del\", \"elif\", \"else\", \"except\", \"finally\",\n                      \"for\", \"from\", \"global\", \"if\", \"import\",\n                      \"lambda\", \"pass\", \"raise\", \"return\",\n                      \"try\", \"while\", \"with\", \"yield\", \"in\", \"False\", \"True\"];\nvar commonBuiltins = [\"abs\", \"all\", \"any\", \"bin\", \"bool\", \"bytearray\", \"callable\", \"chr\",\n                      \"classmethod\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\",\n                      \"enumerate\", \"eval\", \"filter\", \"float\", \"format\", \"frozenset\",\n                      \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\",\n                      \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\", \"len\",\n                      \"list\", \"locals\", \"map\", \"max\", \"memoryview\", \"min\", \"next\",\n                      \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"property\", \"range\",\n                      \"repr\", \"reversed\", \"round\", \"set\", \"setattr\", \"slice\",\n                      \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\",\n                      \"type\", \"vars\", \"zip\", \"__import__\", \"NotImplemented\",\n                      \"Ellipsis\", \"__debug__\"];\n\nfunction top(state) {\n  return state.scopes[state.scopes.length - 1];\n}\n\nexport function mkPython(parserConf) {\n  var ERRORCLASS = \"error\";\n\n  var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\\(\\)\\[\\]\\{\\}@,:`=;\\.\\\\]/;\n  //               (Backwards-compatibility with old, cumbersome config system)\n  var operators = [parserConf.singleOperators, parserConf.doubleOperators, parserConf.doubleDelimiters, parserConf.tripleDelimiters,\n                   parserConf.operators || /^([-+*/%\\/&|^]=?|[<>=]+|\\/\\/=?|\\*\\*=?|!=|[~!@]|\\.\\.\\.)/]\n  for (var i = 0; i < operators.length; i++) if (!operators[i]) operators.splice(i--, 1)\n\n  var hangingIndent = parserConf.hangingIndent;\n\n  var myKeywords = commonKeywords, myBuiltins = commonBuiltins;\n  if (parserConf.extra_keywords != undefined)\n    myKeywords = myKeywords.concat(parserConf.extra_keywords);\n\n  if (parserConf.extra_builtins != undefined)\n    myBuiltins = myBuiltins.concat(parserConf.extra_builtins);\n\n  var py3 = !(parserConf.version && Number(parserConf.version) < 3)\n  if (py3) {\n    // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator\n    var identifiers = parserConf.identifiers|| /^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*/;\n    myKeywords = myKeywords.concat([\"nonlocal\", \"None\", \"aiter\", \"anext\", \"async\", \"await\", \"breakpoint\", \"match\", \"case\"]);\n    myBuiltins = myBuiltins.concat([\"ascii\", \"bytes\", \"exec\", \"print\"]);\n    var stringPrefixes = new RegExp(\"^(([rbuf]|(br)|(rb)|(fr)|(rf))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n  } else {\n    var identifiers = parserConf.identifiers|| /^[_A-Za-z][_A-Za-z0-9]*/;\n    myKeywords = myKeywords.concat([\"exec\", \"print\"]);\n    myBuiltins = myBuiltins.concat([\"apply\", \"basestring\", \"buffer\", \"cmp\", \"coerce\", \"execfile\",\n                                    \"file\", \"intern\", \"long\", \"raw_input\", \"reduce\", \"reload\",\n                                    \"unichr\", \"unicode\", \"xrange\", \"None\"]);\n    var stringPrefixes = new RegExp(\"^(([rubf]|(ur)|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n  }\n  var keywords = wordRegexp(myKeywords);\n  var builtins = wordRegexp(myBuiltins);\n\n  // tokenizers\n  function tokenBase(stream, state) {\n    var sol = stream.sol() && state.lastToken != \"\\\\\"\n    if (sol) state.indent = stream.indentation()\n    // Handle scope changes\n    if (sol && top(state).type == \"py\") {\n      var scopeOffset = top(state).offset;\n      if (stream.eatSpace()) {\n        var lineOffset = stream.indentation();\n        if (lineOffset > scopeOffset)\n          pushPyScope(stream, state);\n        else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != \"#\")\n          state.errorToken = true;\n        return null;\n      } else {\n        var style = tokenBaseInner(stream, state);\n        if (scopeOffset > 0 && dedent(stream, state))\n          style += \" \" + ERRORCLASS;\n        return style;\n      }\n    }\n    return tokenBaseInner(stream, state);\n  }\n\n  function tokenBaseInner(stream, state, inFormat) {\n    if (stream.eatSpace()) return null;\n\n    // Handle Comments\n    if (!inFormat && stream.match(/^#.*/)) return \"comment\";\n\n    // Handle Number Literals\n    if (stream.match(/^[0-9\\.]/, false)) {\n      var floatLiteral = false;\n      // Floats\n      if (stream.match(/^[\\d_]*\\.\\d+(e[\\+\\-]?\\d+)?/i)) { floatLiteral = true; }\n      if (stream.match(/^[\\d_]+\\.\\d*/)) { floatLiteral = true; }\n      if (stream.match(/^\\.\\d+/)) { floatLiteral = true; }\n      if (floatLiteral) {\n        // Float literals may be \"imaginary\"\n        stream.eat(/J/i);\n        return \"number\";\n      }\n      // Integers\n      var intLiteral = false;\n      // Hex\n      if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true;\n      // Binary\n      if (stream.match(/^0b[01_]+/i)) intLiteral = true;\n      // Octal\n      if (stream.match(/^0o[0-7_]+/i)) intLiteral = true;\n      // Decimal\n      if (stream.match(/^[1-9][\\d_]*(e[\\+\\-]?[\\d_]+)?/)) {\n        // Decimal literals may be \"imaginary\"\n        stream.eat(/J/i);\n        // TODO - Can you have imaginary longs?\n        intLiteral = true;\n      }\n      // Zero by itself with no other piece of number.\n      if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n      if (intLiteral) {\n        // Integer literals may be \"long\"\n        stream.eat(/L/i);\n        return \"number\";\n      }\n    }\n\n    // Handle Strings\n    if (stream.match(stringPrefixes)) {\n      var isFmtString = stream.current().toLowerCase().indexOf('f') !== -1;\n      if (!isFmtString) {\n        state.tokenize = tokenStringFactory(stream.current(), state.tokenize);\n        return state.tokenize(stream, state);\n      } else {\n        state.tokenize = formatStringFactory(stream.current(), state.tokenize);\n        return state.tokenize(stream, state);\n      }\n    }\n\n    for (var i = 0; i < operators.length; i++)\n      if (stream.match(operators[i])) return \"operator\"\n\n    if (stream.match(delimiters)) return \"punctuation\";\n\n    if (state.lastToken == \".\" && stream.match(identifiers))\n      return \"property\";\n\n    if (stream.match(keywords) || stream.match(wordOperators))\n      return \"keyword\";\n\n    if (stream.match(builtins))\n      return \"builtin\";\n\n    if (stream.match(/^(self|cls)\\b/))\n      return \"self\";\n\n    if (stream.match(identifiers)) {\n      if (state.lastToken == \"def\" || state.lastToken == \"class\")\n        return \"def\";\n      return \"variable\";\n    }\n\n    // Handle non-detected items\n    stream.next();\n    return inFormat ? null :ERRORCLASS;\n  }\n\n  function formatStringFactory(delimiter, tokenOuter) {\n    while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n      delimiter = delimiter.substr(1);\n\n    var singleline = delimiter.length == 1;\n    var OUTCLASS = \"string\";\n\n    function tokenNestedExpr(depth) {\n      return function(stream, state) {\n        var inner = tokenBaseInner(stream, state, true)\n        if (inner == \"punctuation\") {\n          if (stream.current() == \"{\") {\n            state.tokenize = tokenNestedExpr(depth + 1)\n          } else if (stream.current() == \"}\") {\n            if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1)\n            else state.tokenize = tokenString\n          }\n        }\n        return inner\n      }\n    }\n\n    function tokenString(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\{\\}\\\\]/);\n        if (stream.eat(\"\\\\\")) {\n          stream.next();\n          if (singleline && stream.eol())\n            return OUTCLASS;\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenOuter;\n          return OUTCLASS;\n        } else if (stream.match('{{')) {\n          // ignore {{ in f-str\n          return OUTCLASS;\n        } else if (stream.match('{', false)) {\n          // switch to nested mode\n          state.tokenize = tokenNestedExpr(0)\n          if (stream.current()) return OUTCLASS;\n          else return state.tokenize(stream, state)\n        } else if (stream.match('}}')) {\n          return OUTCLASS;\n        } else if (stream.match('}')) {\n          // single } in f-string is an error\n          return ERRORCLASS;\n        } else {\n          stream.eat(/['\"]/);\n        }\n      }\n      if (singleline) {\n        if (parserConf.singleLineStringErrors)\n          return ERRORCLASS;\n        else\n          state.tokenize = tokenOuter;\n      }\n      return OUTCLASS;\n    }\n    tokenString.isString = true;\n    return tokenString;\n  }\n\n  function tokenStringFactory(delimiter, tokenOuter) {\n    while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n      delimiter = delimiter.substr(1);\n\n    var singleline = delimiter.length == 1;\n    var OUTCLASS = \"string\";\n\n    function tokenString(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\\\]/);\n        if (stream.eat(\"\\\\\")) {\n          stream.next();\n          if (singleline && stream.eol())\n            return OUTCLASS;\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenOuter;\n          return OUTCLASS;\n        } else {\n          stream.eat(/['\"]/);\n        }\n      }\n      if (singleline) {\n        if (parserConf.singleLineStringErrors)\n          return ERRORCLASS;\n        else\n          state.tokenize = tokenOuter;\n      }\n      return OUTCLASS;\n    }\n    tokenString.isString = true;\n    return tokenString;\n  }\n\n  function pushPyScope(stream, state) {\n    while (top(state).type != \"py\") state.scopes.pop()\n    state.scopes.push({offset: top(state).offset + stream.indentUnit,\n                       type: \"py\",\n                       align: null})\n  }\n\n  function pushBracketScope(stream, state, type) {\n    var align = stream.match(/^[\\s\\[\\{\\(]*(?:#|$)/, false) ? null : stream.column() + 1\n    state.scopes.push({offset: state.indent + (hangingIndent || stream.indentUnit),\n                       type: type,\n                       align: align})\n  }\n\n  function dedent(stream, state) {\n    var indented = stream.indentation();\n    while (state.scopes.length > 1 && top(state).offset > indented) {\n      if (top(state).type != \"py\") return true;\n      state.scopes.pop();\n    }\n    return top(state).offset != indented;\n  }\n\n  function tokenLexer(stream, state) {\n    if (stream.sol()) {\n      state.beginningOfLine = true;\n      state.dedent = false;\n    }\n\n    var style = state.tokenize(stream, state);\n    var current = stream.current();\n\n    // Handle decorators\n    if (state.beginningOfLine && current == \"@\")\n      return stream.match(identifiers, false) ? \"meta\" : py3 ? \"operator\" : ERRORCLASS;\n\n    if (/\\S/.test(current)) state.beginningOfLine = false;\n\n    if ((style == \"variable\" || style == \"builtin\")\n        && state.lastToken == \"meta\")\n      style = \"meta\";\n\n    // Handle scope changes.\n    if (current == \"pass\" || current == \"return\")\n      state.dedent = true;\n\n    if (current == \"lambda\") state.lambda = true;\n    if (current == \":\" && !state.lambda && top(state).type == \"py\" && stream.match(/^\\s*(?:#|$)/, false))\n      pushPyScope(stream, state);\n\n    if (current.length == 1 && !/string|comment/.test(style)) {\n      var delimiter_index = \"[({\".indexOf(current);\n      if (delimiter_index != -1)\n        pushBracketScope(stream, state, \"])}\".slice(delimiter_index, delimiter_index+1));\n\n      delimiter_index = \"])}\".indexOf(current);\n      if (delimiter_index != -1) {\n        if (top(state).type == current) state.indent = state.scopes.pop().offset - (hangingIndent || stream.indentUnit)\n        else return ERRORCLASS;\n      }\n    }\n    if (state.dedent && stream.eol() && top(state).type == \"py\" && state.scopes.length > 1)\n      state.scopes.pop();\n\n    return style;\n  }\n\n  return {\n    name: \"python\",\n\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        scopes: [{offset: 0, type: \"py\", align: null}],\n        indent: 0,\n        lastToken: null,\n        lambda: false,\n        dedent: 0\n      };\n    },\n\n    token: function(stream, state) {\n      var addErr = state.errorToken;\n      if (addErr) state.errorToken = false;\n      var style = tokenLexer(stream, state);\n\n      if (style && style != \"comment\")\n        state.lastToken = (style == \"keyword\" || style == \"punctuation\") ? stream.current() : style;\n      if (style == \"punctuation\") style = null;\n\n      if (stream.eol() && state.lambda)\n        state.lambda = false;\n      return addErr ? ERRORCLASS : style;\n    },\n\n    indent: function(state, textAfter, cx) {\n      if (state.tokenize != tokenBase)\n        return state.tokenize.isString ? null : 0;\n\n      var scope = top(state)\n      var closing = scope.type == textAfter.charAt(0) ||\n          scope.type == \"py\" && !state.dedent && /^(else:|elif |except |finally:)/.test(textAfter)\n      if (scope.align != null)\n        return scope.align - (closing ? 1 : 0)\n      else\n        return scope.offset - (closing ? hangingIndent || cx.unit : 0)\n    },\n\n    languageData: {\n      autocomplete: commonKeywords.concat(commonBuiltins).concat([\"exec\", \"print\"]),\n      indentOnInput: /^\\s*([\\}\\]\\)]|else:|elif |except |finally:)$/,\n      commentTokens: {line: \"#\"},\n      closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"'''\", '\"\"\"']}\n    }\n  };\n};\n\nvar words = function(str) { return str.split(\" \"); };\n\nexport const python = mkPython({})\n\nexport const cython = mkPython({\n  extra_keywords: words(\"by cdef cimport cpdef ctypedef enum except \"+\n                        \"extern gil include nogil property public \"+\n                        \"readonly struct union DEF IF ELIF ELSE\")\n})\n"],"names":["e","n","wordRegexp","words","wordOperators","commonKeywords","commonBuiltins","top","state","mkPython","parserConf","ERRORCLASS","delimiters","operators","i","hangingIndent","myKeywords","myBuiltins","py3","identifiers","stringPrefixes","keywords","builtins","tokenBase","stream","sol","scopeOffset","lineOffset","pushPyScope","dedent","style","tokenBaseInner","inFormat","floatLiteral","intLiteral","isFmtString","formatStringFactory","tokenStringFactory","delimiter","tokenOuter","singleline","OUTCLASS","tokenNestedExpr","depth","inner","tokenString","pushBracketScope","type","align","indented","tokenLexer","current","delimiter_index","addErr","textAfter","cx","scope","closing","str","python","cython"],"mappings":"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","x_google_ignoreList":[0]}